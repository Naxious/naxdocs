{"searchDocs":[{"title":"Welcome to Naxdocs","type":0,"sectionRef":"#","url":"/naxdocs/docs/intro","content":"","keywords":"","version":"Next"},{"title":"What is Naxdocs?​","type":1,"pageTitle":"Welcome to Naxdocs","url":"/naxdocs/docs/intro#what-is-naxdocs","content":" Naxdocs brings together comprehensive documentation and API references for the libraries I create for Roblox. As you explore Naxdocs, you'll find detailed guides, examples, and API references that help you harness the full potential of these libraries—and more are coming soon.  ","version":"Next","tagName":"h2"},{"title":"Join the Community​","type":1,"pageTitle":"Welcome to Naxdocs","url":"/naxdocs/docs/intro#join-the-community","content":" Be a part of our growing community! For updates, support, and lively discussions, join our NAXBLOX Discord. Share your projects, ask questions, and help shape the future of Naxdocs and Roblox development.  Welcome aboard, and happy coding!  ","version":"Next","tagName":"h2"},{"title":"Libraries​","type":1,"pageTitle":"Welcome to Naxdocs","url":"/naxdocs/docs/intro#libraries","content":" Currently, my collection includes:  System: A streamlined module framework that lets you specify the loading order with ease, ensuring your modules initialize exactly as you intend. Think of Knit but without cyclical dependancies, and added priority. (Minus networking)Springer: A dynamic spring animation library that animates numbers, Vector2, and Vector3 values with lifelike, physics-based motion. Simple to use, easy to pickup and hard to put down. ","version":"Next","tagName":"h2"},{"title":"Syscore","type":0,"sectionRef":"#","url":"/naxdocs/api/Syscore","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Syscore","url":"/naxdocs/api/Syscore#properties","content":" ","version":null,"tagName":"h2"},{"title":"ShowLoadOrder​","type":1,"pageTitle":"Syscore","url":"/naxdocs/api/Syscore#ShowLoadOrder","content":"Boolean &lt;/&gt; Syscore.ShowLoadOrder: boolean Determines whether or not to show the load order of your modules when initializing them. This debug print is useful for debugging purposes. Default, this is set to true. local Syscore = require(path.to.Syscore) Syscore.ShowLoadOrder = true  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Syscore","url":"/naxdocs/api/Syscore#functions","content":" ","version":null,"tagName":"h2"},{"title":"AddFolderOfModules​","type":1,"pageTitle":"Syscore","url":"/naxdocs/api/Syscore#AddFolderOfModules","content":"&lt;/&gt; Syscore:AddFolderOfModules(folder: Folder ) → () Requires all modules that are direct children of the folder. local Syscore = require(path.to.Syscore) local folder = game:GetService(&quot;ReplicatedStorage&quot;).Modules Syscore:AddFolderOfModules(folder)   ","version":null,"tagName":"h3"},{"title":"AddModule​","type":1,"pageTitle":"Syscore","url":"/naxdocs/api/Syscore#AddModule","content":"&lt;/&gt; Syscore:AddModule(module: ModuleScript ) → () Add a module to be initialized. local Syscore = require(path.to.Syscore) local module = require(path.to.module) Syscore:AddModule(module)   ","version":null,"tagName":"h3"},{"title":"AddTableOfModules​","type":1,"pageTitle":"Syscore","url":"/naxdocs/api/Syscore#AddTableOfModules","content":"&lt;/&gt; Syscore:AddTableOfModules(systems: {ModuleScript }) → () Add a table of modules to be initialized. local Syscore = require(path.to.Syscore) local modules = { require(path.to.module1), require(path.to.module2), require(path.to.module3), } Syscore:AddTableOfModules(modules)   ","version":null,"tagName":"h3"},{"title":"Start​","type":1,"pageTitle":"Syscore","url":"/naxdocs/api/Syscore#Start","content":"&lt;/&gt; Syscore:Start() → {[string]: {{ system: Syscore, response: string }}} Initializes all modules based on their priority. Returns a table of errors that occured during initialization. local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Syscore = require(path.to.Syscore) Syscore:AddFolderOfModules(ReplicatedStorage.ModulesFolder) Syscore:Start()  ","version":null,"tagName":"h3"},{"title":"Springer","type":0,"sectionRef":"#","url":"/naxdocs/api/Springer","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Springer","url":"/naxdocs/api/Springer#types","content":" ","version":null,"tagName":"h2"},{"title":"Springer​","type":1,"pageTitle":"Springer","url":"/naxdocs/api/Springer#Springer","content":"&lt;/&gt; interface Springer { value: number | Vector2 | Vector3 -- The current value of the spring. velocity: number | Vector2 | Vector3 -- The current velocity of the spring. target: number | Vector2 | Vector3 -- The target value of the spring. frequency: number-- The frequency of the spring. damping: number-- The damping of the spring. springType: string-- The type of the spring value. isActive: boolean-- Whether the spring is active or not. onComplete: SpringerSignal-- The signal that fires when the spring reaches the target value. onStep: SpringerSignal-- The signal that fires every frame with the current value of the spring. }   ","version":null,"tagName":"h3"},{"title":"SpringerSignal​","type":1,"pageTitle":"Springer","url":"/naxdocs/api/Springer#SpringerSignal","content":"&lt;/&gt; interface SpringerSignal { new: SpringerSignal-- Creates a new SpringerSignal instance. Connect: ( self: SpringerSignal, handler: (...any) → () ) → Connection-- Connects a function to the signal. Fire: ( self: SpringerSignal, ...any ) → ()-- Fires the signal with the given arguments. Wait: (self: SpringerSignal) → ...any-- Yields the current thread until the signal is fired. }  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Springer","url":"/naxdocs/api/Springer#properties","content":" ","version":null,"tagName":"h2"},{"title":"onComplete​","type":1,"pageTitle":"Springer","url":"/naxdocs/api/Springer#onComplete","content":"Event &lt;/&gt; Springer.onComplete: SpringerSignal Fired when the spring reaches the target value, and is no longer animating. local springer = Springer.new(0, 5, .2) springer:SetTarget(1, 10, .8) springer.onComplete:Connect(function() print(&quot;Springer completed&quot;) end)   ","version":null,"tagName":"h3"},{"title":"onStep​","type":1,"pageTitle":"Springer","url":"/naxdocs/api/Springer#onStep","content":"Event &lt;/&gt; Springer.onStep: SpringerSignal Fired every frame with the current value of the spring. (RenderStepped for client, Heartbeat for server) local springer = Springer.new(0, 5, .2) springer:SetTarget(1, 10, .8) springer.onStep:Connect(function(value) print(value) end)  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Springer","url":"/naxdocs/api/Springer#functions","content":" ","version":null,"tagName":"h2"},{"title":"SetTarget​","type":1,"pageTitle":"Springer","url":"/naxdocs/api/Springer#SetTarget","content":"&lt;/&gt; Springer.SetTarget( self: Springer, newTarget: number | Vector2 | Vector3 ,-- The target value of the spring. frequency: number?,-- The frequency of the spring. damping: number?-- The damping of the spring. ) → Springer-- The Springer instance. Springer:SetTarget(newTarget: number | Vector2 | Vector3, frequency: number?, damping: number?): Springer Sets the target value of the spring. The spring will start animating towards the target value. You can also set the frequency and damping of the spring. If the frequency and damping are not provided, the spring will use the default values of 1. Here is an example of how to use the SetTarget method to bounce between two values every 3 seconds: local springer = Springer.new(0, 4, .3) local switch = true while true do task.wait(3) if switch then springer:SetTarget(1, 6, .5) else springer:SetTarget(0, 2, .2) end switch = not switch end   ","version":null,"tagName":"h3"},{"title":"new​","type":1,"pageTitle":"Springer","url":"/naxdocs/api/Springer#new","content":"&lt;/&gt; Springer.new( initialValue: number | Vector2 | Vector3 , frequency: number?, damping: number?, initialGoal: (number | Vector2 | Vector3 )? ) → Springer-- The Springer instance. constructs a new Springer instance. NOTE The .new method is a constructor and should be called with a colon from the Springer ModuleScript. Springer instances themselves, will not contain the .new method.  ","version":null,"tagName":"h3"}],"options":{"id":"default"}}