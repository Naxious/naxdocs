{"searchDocs":[{"title":"Welcome to Naxdocs","type":0,"sectionRef":"#","url":"/naxdocs/docs/intro","content":"","keywords":"","version":"Next"},{"title":"What is Naxdocs?​","type":1,"pageTitle":"Welcome to Naxdocs","url":"/naxdocs/docs/intro#what-is-naxdocs","content":" Naxdocs brings together comprehensive documentation and API references for the libraries I create for Roblox. As you explore Naxdocs, you'll find detailed guides, examples, and API references that help you harness the full potential of these libraries—and more are coming soon.  ","version":"Next","tagName":"h2"},{"title":"Join the Community​","type":1,"pageTitle":"Welcome to Naxdocs","url":"/naxdocs/docs/intro#join-the-community","content":" Be a part of our growing community! For updates, support, and lively discussions, join our NAXBLOX Discord. Share your projects, ask questions, and help shape the future of Naxdocs and Roblox development.  Welcome aboard, and happy coding!  ","version":"Next","tagName":"h2"},{"title":"Libraries​","type":1,"pageTitle":"Welcome to Naxdocs","url":"/naxdocs/docs/intro#libraries","content":" Currently, my collection includes:  System: A streamlined module framework that lets you specify the loading order with ease, ensuring your modules initialize exactly as you intend. Think of Knit but without cyclical dependancies, and added priority. (Minus networking)Springer: A dynamic spring animation library that animates numbers, Vector2, and Vector3 values with lifelike, physics-based motion. Simple to use, easy to pickup and hard to put down. ","version":"Next","tagName":"h2"},{"title":"SpringerSignal","type":0,"sectionRef":"#","url":"/naxdocs/api/SpringerSignal","content":"SpringerSignal This item only works when running on the client. ClientThis item only works when running on the server. Server SpringerSignals are a way to create a connection between two parts of your code. They are similar to events, but with a few key differences. Signals are not tied to any specific event, and can be fired at any time. They can also be waited on, which allows you to pause the execution of your code until the signal is fired. local Signal = require(path.to.Signal) local signal = Signal.new() local connection = signal:Connect(function(...) print(&quot;Signal fired with arguments:&quot;, ...) end) signal:Fire(&quot;Hello, world!&quot;) connection:Disconnect() SpringerSignals are useful for creating a decoupled system, where different parts of your code can communicate without needing to know about each other. They are also useful for creating a system where you can pause the execution of your code until a certain condition is met. local Signal = require(path.to.Signal) local signal = Signal.new() local function waitForSignal() return signal:Wait() end task.spawn(function() waitForSignal() print(&quot;Signal received!&quot;) end) task.delay(1) signal:Fire() ","keywords":"","version":null},{"title":"Springer","type":0,"sectionRef":"#","url":"/naxdocs/api/Springer","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Springer","url":"/naxdocs/api/Springer#functions","content":" ","version":null,"tagName":"h2"},{"title":"SetTarget​","type":1,"pageTitle":"Springer","url":"/naxdocs/api/Springer#SetTarget","content":"&lt;/&gt; Springer.SetTarget( self: Springer, newTarget: number | Vector2 | Vector3 , frequency: number?, damping: number? ) → Springer Springer:SetTarget(newTarget: number | Vector2 | Vector3, frequency: number?, damping: number?): Springer Sets the target value of the spring. The spring will start animating towards the target value. You can also set the frequency and damping of the spring. If the frequency and damping are not provided, the spring will use the default values of 1. @param newTarget number | Vector2 | Vector3 -- The target value of the spring. @param frequency number? -- The frequency of the spring. @param damping number? -- The damping of the spring. @return Springer -- The Springer instance.   ","version":null,"tagName":"h3"},{"title":"new​","type":1,"pageTitle":"Springer","url":"/naxdocs/api/Springer#new","content":"&lt;/&gt; Springer.new( initialValue: number | Vector2 | Vector3 , frequency: number?, damping: number?, initialGoal: (number | Vector2 | Vector3 )? ) → Springer-- The Springer instance. constructs a new Springer instance. ","version":null,"tagName":"h3"}],"options":{"id":"default"}}